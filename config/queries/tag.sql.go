// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tag.sql

package queries

import (
	"context"
	"time"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags(user_id, name, sign)
  VALUES ($1, $2, $3)
RETURNING
  id, user_id, name, sign, deleted_at, created_at, updated_at
`

type CreateTagParams struct {
	UserID int32  `json:"userId"`
	Name   string `json:"name"`
	Sign   string `json:"sign"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.UserID, arg.Name, arg.Sign)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Sign,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :one
UPDATE
  tags
SET
  deleted_at = now(),
  updated_at = now()
WHERE
  id = $1
RETURNING
  id, user_id, name, sign, deleted_at, created_at, updated_at
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) (Tag, error) {
	row := q.db.QueryRowContext(ctx, deleteTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Sign,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserAllTag = `-- name: DeleteUserAllTag :exec
DELETE FROM tags
WHERE user_id = $1
`

func (q *Queries) DeleteUserAllTag(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserAllTag, userID)
	return err
}

const findTag = `-- name: FindTag :one
SELECT
  id, user_id, name, sign, deleted_at, created_at, updated_at
FROM
  tags
WHERE
  id = $1
  AND user_id = $2
  AND deleted_at IS NULL
`

type FindTagParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"userId"`
}

func (q *Queries) FindTag(ctx context.Context, arg FindTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, findTag, arg.ID, arg.UserID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Sign,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTag = `-- name: ListTag :many
SELECT
  id, user_id, name, sign, deleted_at, created_at, updated_at
FROM
  tags
WHERE
  user_id = $1
  AND deleted_at IS NULL
ORDER BY
  created_at DESC
`

func (q *Queries) ListTag(ctx context.Context, userID int32) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTag, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Sign,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE
  tags
SET
  name = CASE WHEN $2::varchar = '' THEN
    name
  ELSE
    $2
  END,
  sign = CASE WHEN $3::varchar = '' THEN
    sign
  ELSE
    $3
  END,
  updated_at = CASE WHEN $4::timestamp = '' THEN
    updated_at
  ELSE
    $4
  END,
  updated_at = now()
WHERE
  id = $1
RETURNING
  id, user_id, name, sign, deleted_at, created_at, updated_at
`

type UpdateTagParams struct {
	ID        int32     `json:"id"`
	Name      string    `json:"name"`
	Sign      string    `json:"sign"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, updateTag,
		arg.ID,
		arg.Name,
		arg.Sign,
		arg.UpdatedAt,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Sign,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
